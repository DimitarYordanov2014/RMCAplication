// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RMCAplication.Data;

#nullable disable

namespace RMCAplication.Data.Migrations
{
    [DbContext(typeof(RMCApplicationDbContext))]
    [Migration("20241030130919_FixingWarehouse")]
    partial class FixingWarehouse
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RMCAplication.Data.Models.Consumable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Consumable");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Count = 5,
                            Description = "Масло за малки превозни средства, Сменя се на 15 000 км.",
                            IsDeleted = false,
                            Name = "Масло 5/40 Мобил",
                            Price = 2.70m,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = 2,
                            Count = 3,
                            Description = "За малки шевни машини. Сменя се когато изгори.",
                            IsDeleted = false,
                            Name = "Мотор за шевна машина",
                            Price = 45.50m,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = 3,
                            Count = 5,
                            Description = "За малки шевни машини. Сменя се когато свърши.",
                            IsDeleted = false,
                            Name = "Макри за шевни машини",
                            Price = 2.70m,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = 4,
                            Count = 5,
                            Description = "Става за всички видове мелници.",
                            IsDeleted = false,
                            Name = "Сито номе 4",
                            Price = 320m,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = 5,
                            Count = 15,
                            Description = "Става за всички видове мелници.",
                            IsDeleted = false,
                            Name = "Сито номе 5",
                            Price = 450m,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = 6,
                            Count = 8,
                            Description = "Става за всички видове мелници.",
                            IsDeleted = false,
                            Name = "Сито номе 3",
                            Price = 325m,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = 7,
                            Count = 5,
                            Description = "Става за всички лампи на паркинга и двора.",
                            IsDeleted = false,
                            Name = "Лампа за улично осветление",
                            Price = 32.40m,
                            WarehouseId = 2
                        });
                });

            modelBuilder.Entity("RMCAplication.Data.Models.Mechanization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Mechanizations");
                });

            modelBuilder.Entity("RMCAplication.Data.Models.MechanizationConsumable", b =>
                {
                    b.Property<int>("MechanizationId")
                        .HasColumnType("int");

                    b.Property<int>("ConsuableId")
                        .HasColumnType("int");

                    b.Property<int?>("ConsumableId")
                        .HasColumnType("int");

                    b.HasKey("MechanizationId", "ConsuableId");

                    b.HasIndex("ConsuableId");

                    b.HasIndex("ConsumableId");

                    b.ToTable("MechanizationConsumables");
                });

            modelBuilder.Entity("RMCAplication.Data.Models.MechanizationSparePart", b =>
                {
                    b.Property<int>("MechanizationId")
                        .HasColumnType("int");

                    b.Property<int>("SparePartId")
                        .HasColumnType("int");

                    b.HasKey("MechanizationId", "SparePartId");

                    b.HasIndex("SparePartId");

                    b.ToTable("MechanizationSpareParts");
                });

            modelBuilder.Entity("RMCAplication.Data.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("RMCAplication.Data.Models.SparePart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId");

                    b.ToTable("SpareParts");
                });

            modelBuilder.Entity("RMCAplication.Data.Models.Tool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Tools");
                });

            modelBuilder.Entity("RMCAplication.Data.Models.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Warehouse");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Намира се в търговската част на фирмата. В него се съхраняват важните резервни части и повечето инструменти",
                            IsDeleted = false,
                            Name = "Централен склад"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Намира се в производсвото на фирмата. В него се съхраняват резервни части за призводството",
                            IsDeleted = false,
                            Name = "Производствен склад"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Намира се в двора на фирмата. В него се извършват повечето ремонтни дейност.",
                            IsDeleted = false,
                            Name = "Ремонтна стая"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Намира се в двора на фирмата. В него се съхраняват резервни части и автомобилни гуми.",
                            IsDeleted = false,
                            Name = "Авто-мото склад"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RMCAplication.Data.Models.Consumable", b =>
                {
                    b.HasOne("RMCAplication.Data.Models.Warehouse", "Warehouse")
                        .WithMany("Consumables")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("RMCAplication.Data.Models.MechanizationConsumable", b =>
                {
                    b.HasOne("RMCAplication.Data.Models.Warehouse", "Consumable")
                        .WithMany()
                        .HasForeignKey("ConsuableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RMCAplication.Data.Models.Consumable", null)
                        .WithMany("MechanizationConsumables")
                        .HasForeignKey("ConsumableId");

                    b.HasOne("RMCAplication.Data.Models.Mechanization", "Mechanization")
                        .WithMany("MechanizationConsumables")
                        .HasForeignKey("MechanizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consumable");

                    b.Navigation("Mechanization");
                });

            modelBuilder.Entity("RMCAplication.Data.Models.MechanizationSparePart", b =>
                {
                    b.HasOne("RMCAplication.Data.Models.Mechanization", "Mechanization")
                        .WithMany("MechanizationSpareParts")
                        .HasForeignKey("MechanizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RMCAplication.Data.Models.SparePart", "SparePart")
                        .WithMany("MechanizationSpareParts")
                        .HasForeignKey("SparePartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mechanization");

                    b.Navigation("SparePart");
                });

            modelBuilder.Entity("RMCAplication.Data.Models.SparePart", b =>
                {
                    b.HasOne("RMCAplication.Data.Models.Warehouse", "Warehouse")
                        .WithMany("SpareParts")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("RMCAplication.Data.Models.Tool", b =>
                {
                    b.HasOne("RMCAplication.Data.Models.Person", null)
                        .WithMany("Tools")
                        .HasForeignKey("PersonId");

                    b.HasOne("RMCAplication.Data.Models.Warehouse", "Warehouse")
                        .WithMany("Tools")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("RMCAplication.Data.Models.Consumable", b =>
                {
                    b.Navigation("MechanizationConsumables");
                });

            modelBuilder.Entity("RMCAplication.Data.Models.Mechanization", b =>
                {
                    b.Navigation("MechanizationConsumables");

                    b.Navigation("MechanizationSpareParts");
                });

            modelBuilder.Entity("RMCAplication.Data.Models.Person", b =>
                {
                    b.Navigation("Tools");
                });

            modelBuilder.Entity("RMCAplication.Data.Models.SparePart", b =>
                {
                    b.Navigation("MechanizationSpareParts");
                });

            modelBuilder.Entity("RMCAplication.Data.Models.Warehouse", b =>
                {
                    b.Navigation("Consumables");

                    b.Navigation("SpareParts");

                    b.Navigation("Tools");
                });
#pragma warning restore 612, 618
        }
    }
}
