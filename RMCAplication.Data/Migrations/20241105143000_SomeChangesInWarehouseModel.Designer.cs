// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RMCAplication.Data;

#nullable disable

namespace RMCAplication.Data.Migrations
{
    [DbContext(typeof(RMCApplicationDbContext))]
    [Migration("20241105143000_SomeChangesInWarehouseModel")]
    partial class SomeChangesInWarehouseModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RMCAplication.Data.Models.Consumable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Consumable");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Count = 5,
                            Description = "Масло за малки превозни средства, Сменя се на 15 000 км.",
                            IsDeleted = false,
                            Name = "Масло 5/40 Мобил",
                            Price = 2.70m,
                            WarehouseId = 4
                        },
                        new
                        {
                            Id = 2,
                            Count = 3,
                            Description = "За малки шевни машини. Сменя се когато изгори.",
                            IsDeleted = false,
                            Name = "Мотор за шевна машина",
                            Price = 45.50m,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = 3,
                            Count = 5,
                            Description = "За малки шевни машини. Сменя се когато свърши.",
                            IsDeleted = false,
                            Name = "Макри за шевни машини",
                            Price = 2.70m,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = 4,
                            Count = 5,
                            Description = "Става за всички видове мелници.",
                            IsDeleted = false,
                            Name = "Сито номе 4",
                            Price = 320m,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = 5,
                            Count = 15,
                            Description = "Става за всички видове мелници.",
                            IsDeleted = false,
                            Name = "Сито номе 5",
                            Price = 450m,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = 6,
                            Count = 8,
                            Description = "Става за всички видове мелници.",
                            IsDeleted = false,
                            Name = "Сито номе 3",
                            Price = 325m,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = 7,
                            Count = 5,
                            Description = "Става за всички лампи на паркинга и двора.",
                            IsDeleted = false,
                            Name = "Лампа за улично осветление",
                            Price = 32.40m,
                            WarehouseId = 3
                        });
                });

            modelBuilder.Entity("RMCAplication.Data.Models.Mechanization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Mechanizations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Гранул-преса 1"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Гранул-преса 2"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Елктрокар 1"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "Елктрокар 2"
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "Миксер 1"
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Name = "Миксер 2"
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            Name = "Мерцедес 312"
                        },
                        new
                        {
                            Id = 8,
                            IsDeleted = false,
                            Name = "ДАФ ХФ - РА5765ВР"
                        },
                        new
                        {
                            Id = 9,
                            IsDeleted = false,
                            Name = "ДАФ ХФ - РА7133КМ"
                        },
                        new
                        {
                            Id = 10,
                            IsDeleted = false,
                            Name = "ДАФ ХФ - РА7766КВ"
                        },
                        new
                        {
                            Id = 11,
                            IsDeleted = false,
                            Name = "Пакетажна линия 1"
                        },
                        new
                        {
                            Id = 12,
                            IsDeleted = false,
                            Name = "Пакетажна линия 2"
                        },
                        new
                        {
                            Id = 13,
                            IsDeleted = false,
                            Name = "Пакетажна линия 3"
                        },
                        new
                        {
                            Id = 14,
                            IsDeleted = false,
                            Name = "Пакетажна линия 4"
                        },
                        new
                        {
                            Id = 15,
                            IsDeleted = false,
                            Name = "Мелница линия 1"
                        },
                        new
                        {
                            Id = 16,
                            IsDeleted = false,
                            Name = "Мелница линия 2"
                        });
                });

            modelBuilder.Entity("RMCAplication.Data.Models.MechanizationConsumable", b =>
                {
                    b.Property<int>("MechanizationId")
                        .HasColumnType("int");

                    b.Property<int>("ConsumableId")
                        .HasColumnType("int");

                    b.HasKey("MechanizationId", "ConsumableId");

                    b.HasIndex("ConsumableId");

                    b.ToTable("MechanizationConsumables");

                    b.HasData(
                        new
                        {
                            MechanizationId = 1,
                            ConsumableId = 5
                        },
                        new
                        {
                            MechanizationId = 1,
                            ConsumableId = 6
                        },
                        new
                        {
                            MechanizationId = 2,
                            ConsumableId = 5
                        },
                        new
                        {
                            MechanizationId = 2,
                            ConsumableId = 6
                        },
                        new
                        {
                            MechanizationId = 7,
                            ConsumableId = 1
                        },
                        new
                        {
                            MechanizationId = 11,
                            ConsumableId = 2
                        },
                        new
                        {
                            MechanizationId = 11,
                            ConsumableId = 3
                        },
                        new
                        {
                            MechanizationId = 12,
                            ConsumableId = 2
                        },
                        new
                        {
                            MechanizationId = 12,
                            ConsumableId = 3
                        },
                        new
                        {
                            MechanizationId = 13,
                            ConsumableId = 2
                        },
                        new
                        {
                            MechanizationId = 13,
                            ConsumableId = 3
                        },
                        new
                        {
                            MechanizationId = 14,
                            ConsumableId = 2
                        },
                        new
                        {
                            MechanizationId = 14,
                            ConsumableId = 3
                        });
                });

            modelBuilder.Entity("RMCAplication.Data.Models.MechanizationSparePart", b =>
                {
                    b.Property<int>("MechanizationId")
                        .HasColumnType("int");

                    b.Property<int>("SparePartId")
                        .HasColumnType("int");

                    b.HasKey("MechanizationId", "SparePartId");

                    b.HasIndex("SparePartId");

                    b.ToTable("MechanizationSpareParts");

                    b.HasData(
                        new
                        {
                            MechanizationId = 5,
                            SparePartId = 7
                        },
                        new
                        {
                            MechanizationId = 5,
                            SparePartId = 8
                        },
                        new
                        {
                            MechanizationId = 6,
                            SparePartId = 7
                        },
                        new
                        {
                            MechanizationId = 6,
                            SparePartId = 8
                        },
                        new
                        {
                            MechanizationId = 7,
                            SparePartId = 1
                        },
                        new
                        {
                            MechanizationId = 8,
                            SparePartId = 2
                        },
                        new
                        {
                            MechanizationId = 9,
                            SparePartId = 2
                        },
                        new
                        {
                            MechanizationId = 10,
                            SparePartId = 2
                        },
                        new
                        {
                            MechanizationId = 11,
                            SparePartId = 4
                        },
                        new
                        {
                            MechanizationId = 11,
                            SparePartId = 7
                        },
                        new
                        {
                            MechanizationId = 11,
                            SparePartId = 8
                        },
                        new
                        {
                            MechanizationId = 12,
                            SparePartId = 4
                        },
                        new
                        {
                            MechanizationId = 12,
                            SparePartId = 7
                        },
                        new
                        {
                            MechanizationId = 12,
                            SparePartId = 8
                        },
                        new
                        {
                            MechanizationId = 13,
                            SparePartId = 4
                        },
                        new
                        {
                            MechanizationId = 13,
                            SparePartId = 7
                        },
                        new
                        {
                            MechanizationId = 13,
                            SparePartId = 8
                        },
                        new
                        {
                            MechanizationId = 14,
                            SparePartId = 4
                        },
                        new
                        {
                            MechanizationId = 14,
                            SparePartId = 7
                        },
                        new
                        {
                            MechanizationId = 14,
                            SparePartId = 8
                        });
                });

            modelBuilder.Entity("RMCAplication.Data.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Persons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Светослав Ненчев"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Димитър Присадников"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Иван Иванов"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "Петър Петров"
                        });
                });

            modelBuilder.Entity("RMCAplication.Data.Models.SparePart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId");

                    b.ToTable("SpareParts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Count = 4,
                            Description = "За Мерцердес",
                            IsDeleted = false,
                            Name = "Гума 190/70/16",
                            Price = 234.70m,
                            WarehouseId = 4
                        },
                        new
                        {
                            Id = 2,
                            Count = 4,
                            Description = "За ДАФ",
                            IsDeleted = false,
                            Name = "Гума 240/70/14",
                            Price = 234.70m,
                            WarehouseId = 4
                        },
                        new
                        {
                            Id = 3,
                            Count = 2,
                            Description = "За ДАФ - диферинцялни",
                            IsDeleted = false,
                            Name = "Гума 240/70/14",
                            Price = 234.70m,
                            WarehouseId = 4
                        },
                        new
                        {
                            Id = 4,
                            Count = 4,
                            Description = "За силози",
                            IsDeleted = false,
                            Name = "Елктродвигате 22кв",
                            Price = 1234.70m,
                            WarehouseId = 4
                        },
                        new
                        {
                            Id = 5,
                            Count = 4,
                            Description = "За редлери",
                            IsDeleted = false,
                            Name = "Елктродвигате 5кв",
                            Price = 234.70m,
                            WarehouseId = 3
                        },
                        new
                        {
                            Id = 6,
                            Count = 6,
                            Description = "За елеватор",
                            IsDeleted = false,
                            Name = "Елктродвигате 12кв",
                            Price = 234.70m,
                            WarehouseId = 3
                        },
                        new
                        {
                            Id = 7,
                            Count = 1,
                            Description = "За мелница",
                            IsDeleted = false,
                            Name = "Лента номер 4",
                            Price = 2324.70m,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = 8,
                            Count = 7,
                            Description = "За мелница",
                            IsDeleted = false,
                            Name = "Лента номер 5",
                            Price = 2324.70m,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = 9,
                            Count = 4,
                            Description = "За мелница",
                            IsDeleted = false,
                            Name = "Лента номер 6",
                            Price = 2324.70m,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = 10,
                            Count = 14,
                            Description = "За офиса",
                            IsDeleted = false,
                            Name = "Ремък за шевна машина",
                            Price = 34.70m,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = 11,
                            Count = 2,
                            Description = "За офиса",
                            IsDeleted = false,
                            Name = "Принтер",
                            Price = 34.70m,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = 12,
                            Count = 1,
                            Description = "За офиса",
                            IsDeleted = false,
                            Name = "Монитор 22 инча",
                            Price = 34.70m,
                            WarehouseId = 1
                        });
                });

            modelBuilder.Entity("RMCAplication.Data.Models.Tool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Tools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Count = 1,
                            Description = "Малка кутия",
                            IsDeleted = false,
                            Location = "Гардероб в ляво.",
                            Name = "Комплект клчове 6 - 22",
                            Price = 22.70m,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = 2,
                            Count = 1,
                            Description = "Бош",
                            IsDeleted = false,
                            Location = "Третия рафт срещу вратата.",
                            Name = "Шлайф на батерия",
                            Price = 232.00m,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = 3,
                            Count = 3,
                            Description = "",
                            IsDeleted = false,
                            Location = "",
                            Name = "Статична бормашина",
                            Price = 2322.00m,
                            WarehouseId = 3
                        },
                        new
                        {
                            Id = 4,
                            Count = 2,
                            Description = "Червено куфарче",
                            IsDeleted = false,
                            Location = "Гардероб в ляво.",
                            Name = "Комплект за обслужване на пакетажна машина.",
                            Price = 450.70m,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = 5,
                            Count = 4,
                            Description = "",
                            IsDeleted = false,
                            Location = "В ляво до стената.",
                            Name = "Комплект за смяна на масло на автомобили.",
                            Price = 540.00m,
                            WarehouseId = 4
                        },
                        new
                        {
                            Id = 6,
                            Count = 1,
                            Description = "Бензинова",
                            IsDeleted = false,
                            Location = "Трети рафт в дясно.",
                            Name = "Косачка за трева",
                            Price = 1320.00m,
                            WarehouseId = 4
                        },
                        new
                        {
                            Id = 7,
                            Count = 1,
                            Description = "Малък на батерии.",
                            IsDeleted = false,
                            Location = "трети рефт от ляво.",
                            Name = "Винтоверт Бош",
                            Price = 522.70m,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = 8,
                            Count = 1,
                            Description = "Голям на батерии.",
                            IsDeleted = false,
                            Name = "Винтоверт Тошиба",
                            Price = 452.70m,
                            WarehouseId = 1
                        });
                });

            modelBuilder.Entity("RMCAplication.Data.Models.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("Warehouse");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Намира се в търговската част на фирмата. В него се съхраняват важните резервни части и повечето инструменти",
                            IsDeleted = false,
                            Name = "Централен склад"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Намира се в производсвото на фирмата. В него се съхраняват резервни части за призводството",
                            IsDeleted = false,
                            Name = "Производствен склад"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Намира се в двора на фирмата. В него се извършват повечето ремонтни дейност.",
                            IsDeleted = false,
                            Name = "Ремонтна стая"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Намира се в двора на фирмата. В него се съхраняват резервни части и автомобилни гуми.",
                            IsDeleted = false,
                            Name = "Авто-мото склад"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RMCAplication.Data.Models.Consumable", b =>
                {
                    b.HasOne("RMCAplication.Data.Models.Warehouse", "Warehouse")
                        .WithMany("Consumables")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("RMCAplication.Data.Models.MechanizationConsumable", b =>
                {
                    b.HasOne("RMCAplication.Data.Models.Consumable", "Consumable")
                        .WithMany("MechanizationConsumables")
                        .HasForeignKey("ConsumableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RMCAplication.Data.Models.Mechanization", "Mechanization")
                        .WithMany("MechanizationConsumables")
                        .HasForeignKey("MechanizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consumable");

                    b.Navigation("Mechanization");
                });

            modelBuilder.Entity("RMCAplication.Data.Models.MechanizationSparePart", b =>
                {
                    b.HasOne("RMCAplication.Data.Models.Mechanization", "Mechanization")
                        .WithMany("MechanizationSpareParts")
                        .HasForeignKey("MechanizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RMCAplication.Data.Models.SparePart", "SparePart")
                        .WithMany("MechanizationSpareParts")
                        .HasForeignKey("SparePartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mechanization");

                    b.Navigation("SparePart");
                });

            modelBuilder.Entity("RMCAplication.Data.Models.SparePart", b =>
                {
                    b.HasOne("RMCAplication.Data.Models.Warehouse", "Warehouse")
                        .WithMany("SpareParts")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("RMCAplication.Data.Models.Tool", b =>
                {
                    b.HasOne("RMCAplication.Data.Models.Person", null)
                        .WithMany("Tools")
                        .HasForeignKey("PersonId");

                    b.HasOne("RMCAplication.Data.Models.Warehouse", "Warehouse")
                        .WithMany("Tools")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("RMCAplication.Data.Models.Consumable", b =>
                {
                    b.Navigation("MechanizationConsumables");
                });

            modelBuilder.Entity("RMCAplication.Data.Models.Mechanization", b =>
                {
                    b.Navigation("MechanizationConsumables");

                    b.Navigation("MechanizationSpareParts");
                });

            modelBuilder.Entity("RMCAplication.Data.Models.Person", b =>
                {
                    b.Navigation("Tools");
                });

            modelBuilder.Entity("RMCAplication.Data.Models.SparePart", b =>
                {
                    b.Navigation("MechanizationSpareParts");
                });

            modelBuilder.Entity("RMCAplication.Data.Models.Warehouse", b =>
                {
                    b.Navigation("Consumables");

                    b.Navigation("SpareParts");

                    b.Navigation("Tools");
                });
#pragma warning restore 612, 618
        }
    }
}
